openapi: 3.0.0
paths:
  /user:
    get:
      operationId: UserController_getAll
      summary: Get user list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - User
    post:
      operationId: UserController_creat
      summary: Add new user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: Track is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - User
  /user/{id}:
    get:
      operationId: UserController_getById
      summary: Get single user by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - User
    put:
      operationId: UserController_update
      summary: Update user information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: The user has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request. userId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - User
    delete:
      operationId: UserController_remove
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. userId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - User
  /artist:
    get:
      operationId: ArtistController_getAll
      summary: Get artist list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
      tags:
        - Artist
    post:
      operationId: ArtistController_creat
      summary: Add new artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDto'
      responses:
        '201':
          description: Artist is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Artist
  /artist/{id}:
    get:
      operationId: ArtistController_getById
      summary: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found
      tags:
        - Artist
    put:
      operationId: ArtistController_update
      summary: Update artist information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDto'
      responses:
        '200':
          description: The artist has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found
      tags:
        - Artist
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found
      tags:
        - Artist
  /album:
    get:
      operationId: AlbumController_getAll
      summary: Get albums list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
      tags:
        - Album
    post:
      operationId: AlbumController_creat
      summary: Add new album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumDto'
      responses:
        '201':
          description: Album is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumDto'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Album
  /album/{id}:
    get:
      operationId: AlbumController_getById
      summary: Get single album by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Album
    put:
      operationId: AlbumController_update
      summary: Update album information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlbumDto'
      responses:
        '200':
          description: The album has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Album
    delete:
      operationId: AlbumController_remove
      summary: Delete album
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Album
  /track:
    get:
      operationId: TrackController_getAll
      summary: Get track list
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - Track
    post:
      operationId: TrackController_creat
      summary: Add new track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackDto'
      responses:
        '201':
          description: Track is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. body does not contain required fields
      tags:
        - Track
  /track/{id}:
    get:
      operationId: TrackController_getById
      summary: Get single track by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - Track
    put:
      operationId: TrackController_update
      summary: Update track information
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackDto'
      responses:
        '200':
          description: The track has been updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - Track
    delete:
      operationId: TrackController_remove
      summary: Delete track
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - Track
  /favs:
    get:
      operationId: FavoriteController_getAll
      summary: Get favorite
      parameters: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteDto'
      tags:
        - Favorite
  /favs/album/{id}:
    post:
      operationId: FavoriteController_setAlbum
      summary: Add album to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Added successfully
        '400':
          description: Bad. albumId is invalid (not uuid)
      tags:
        - Favorite
    delete:
      operationId: FavoriteController_removeAlbum
      summary: Delete album from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. albumId is invalid (not uuid)
        '404':
          description: Album was not found
      tags:
        - Favorite
  /favs/track/{id}:
    post:
      operationId: FavoriteController_setTrack
      summary: Add track to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Track successfully
        '400':
          description: Bad. trackId is invalid (not uuid)
      tags:
        - Favorite
    delete:
      operationId: FavoriteController_removeTrack
      summary: Delete track from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. trackId is invalid (not uuid)
        '404':
          description: Track was not found
      tags:
        - Favorite
  /favs/artist/{id}:
    post:
      operationId: FavoriteController_setArtist
      summary: Add artist to the favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Track successfully
        '400':
          description: Bad. artistId is invalid (not uuid)
      tags:
        - Favorite
    delete:
      operationId: FavoriteController_removeArtist
      summary: Delete artist from favorites
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted successfully
        '400':
          description: Bad request. artistId is invalid (not uuid)
        '404':
          description: Artist was not found
      tags:
        - Favorite
info:
  title: Home Library Service
  description: Home music library service
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        login:
          type: string
        password:
          type: string
        version:
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - id
        - login
        - password
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    UpdateUserDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    Artist:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    ArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    Album:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          nullable: true
      required:
        - id
        - name
        - year
        - artistId
    AlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
        artistId:
          type: string
          nullable: true
      required:
        - name
        - year
        - artistId
    Track:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: number
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    TrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          nullable: true
        albumId:
          type: string
          nullable: true
        duration:
          type: number
      required:
        - name
        - artistId
        - albumId
        - duration
    FavoriteDto:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
